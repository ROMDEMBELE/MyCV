include:
  - template: SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

variables:
  SAST_EXCLUDED_ANALYZERS: "spotbugs"
  ANDROID_SDK_ROOT: "${CI_PROJECT_DIR}/android-sdk-root"

stages:
  - .pre
  - verify
  - build
  - test
  - visualize
  - release

# templates
secret_detection:
  interruptible: true

.dokka_template: &dokka_definition
  needs: [android_sdk]
  image: openjdk:11-jdk
  interruptible: true
  script:
    - ./gradlew dokkaHtml
  artifacts:
    name: "reports_${CI_PROJECT_NAME}_${CI_BUILD_REF_NAME}"
    when: always
    expire_in: 3 days
    paths:
      - app/build/dokka/html/

android_sdk:
  image: openjdk:11-jdk
  interruptible: true
  stage: .pre
  variables:
    ANDROID_SDK_TOOLS: "/tmp/sdktools"
  script:
    - ANDROID_COMPILE_SDK_VERSION="$(sed -n 's/.*compileSdkVersion = \(.*\)/\1/p' build.gradle)"
    - ANDROID_BUILD_TOOLS_VERSION="$(sed -n 's/.*buildToolsVersion = \"\(.*\)\"/\1/p' build.gradle)"
    - CMDLINE_TOOLS_VERSION="$(curl https://developer.android.com/studio/index.html#command-tools | sed -n 's/.*commandlinetools-linux-\(.*\)_latest.zip.*/\1/p' | uniq)"
    - apt-get --quiet update --yes && apt-get --quiet install --yes wget unzip
    - mkdir -p ${ANDROID_SDK_TOOLS}
    - wget https://dl.google.com/android/repository/commandlinetools-linux-${CMDLINE_TOOLS_VERSION}_latest.zip --output-document=${ANDROID_SDK_TOOLS}/cmdline-tools.zip
    - unzip ${ANDROID_SDK_TOOLS}/cmdline-tools.zip -d ${ANDROID_SDK_TOOLS}
    - mkdir -p ${ANDROID_SDK_ROOT}
    - SDK_MANAGER=$(find ${ANDROID_SDK_TOOLS} -name sdkmanager -printf '%h\n')
    - ${SDK_MANAGER}/sdkmanager --sdk_root=${ANDROID_SDK_ROOT} --version
    - yes | ${SDK_MANAGER}/sdkmanager --sdk_root=${ANDROID_SDK_ROOT} --licenses || true
    - ${SDK_MANAGER}/sdkmanager --sdk_root=${ANDROID_SDK_ROOT} "platforms;android-${ANDROID_COMPILE_SDK_VERSION}"
    - ${SDK_MANAGER}/sdkmanager --sdk_root=${ANDROID_SDK_ROOT} "platform-tools"
    - ${SDK_MANAGER}/sdkmanager --sdk_root=${ANDROID_SDK_ROOT} "build-tools;${ANDROID_BUILD_TOOLS_VERSION}"
    - chmod +x ./gradlew
  artifacts:
    paths:
      - ${ANDROID_SDK_ROOT}/

# Stage : verify => lint & detekt
lintDebug:
  needs: [android_sdk]
  image: openjdk:11-jdk
  interruptible: true
  stage: verify
  script:
    - ./gradlew lint
  artifacts:
    name: "reports_${CI_PROJECT_NAME}_${CI_BUILD_REF_NAME}"
    when: always
    expire_in: 3 days
    paths:
      - settings/reports/

detektDebug:
  needs: [android_sdk]
  image: openjdk:11-jdk
  stage: verify
  interruptible: true
  script:
    - ./gradlew detekt
  artifacts:
    name: "reports_${CI_PROJECT_NAME}_${CI_BUILD_REF_NAME}"
    when: always
    expire_in: 3 days
    paths:
      - settings/reports/

# Stage : build => generate doc, assembleDebug, assembleRelease
dokka:
  <<: *dokka_definition
  stage: build
  except:
    - main

assembleDebug:
  needs: [android_sdk]
  image: openjdk:11-jdk
  stage: build
  interruptible: true
  script:
    - ./gradlew assembleDebug
  artifacts:
    paths:
      - app/build/outputs/
      - ${ANDROID_SDK_ROOT}/

assembleRelease:
  needs: [android_sdk]
  image: openjdk:11-jdk
  stage: build
  interruptible: true
  script:
    - ./gradlew assembleRelease
  artifacts:
    paths:
      - app/build/outputs/
      - ${ANDROID_SDK_ROOT}/

# Stage: test => unit test, text coverage, test ui, etc...
mobsf-android-sast-apk:
  needs: [assembleDebug]
  extends: mobsf-android-sast
  stage: test
  variables:
    GIT_STRATEGY: none
    SEARCH_MAX_DEPTH: 8
    SAST_EXPERIMENTAL_FEATURES: "true"

test-coverage:
  stage: test
  image: gradle:6.6.1-jdk11
  script:
    - gradle test jacocoTestReport jacocoTestCoverageVerification
  artifacts:
    paths:
      - build/jacoco/jacoco.xml

coverage-report:
  # Must be in a stage later than test-jdk11's stage.
  # The `visualize` stage does not exist by default.
  # Please define it first, or chose an existing stage like `deploy`.
  stage: visualize
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.7
  script:
    # convert report from jacoco to cobertura, using relative project path
    - python /opt/cover2cover.py build/jacoco/jacoco.xml $CI_PROJECT_DIR/src/main/java/ > build/cobertura.xml
  needs: ["test-coverage"]
  artifacts:
    reports:
      cobertura: build/cobertura.xml

# Stage: release
pages:
  <<: *dokka_definition
  stage: release
  only:
    - main

release:
  image: node:16-buster-slim
  stage: release
  interruptible: true
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends git-core ca-certificates
    - npm install -g semantic-release @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/changelog @semantic-release/git @semantic-release/gitlab
  script:
    - semantic-release --dry-run --branches ${CI_COMMIT_BRANCH}